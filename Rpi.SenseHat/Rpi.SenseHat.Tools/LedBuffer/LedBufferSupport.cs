////////////////////////////////////////////////////////////////////////////
//
//  This file is part of Rpi.SenseHat.Tools
//
//  Copyright (c) 2017, Mattias Larsson
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of 
//  this software and associated documentation files (the "Software"), to deal in 
//  the Software without restriction, including without limitation the rights to use, 
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the 
//  Software, and to permit persons to whom the Software is furnished to do so, 
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all 
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, 
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT 
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

using System.Drawing;
using System.Linq;

namespace Emmellsoft.IoT.Rpi.SenseHat.Tools.LedBuffer
{
	public static class LedBufferSupport
	{
		public static Color[,] BufferToPixels(byte[] buffer, double senseHatGamma)
		{
			var pixels = new Color[8, 8];

			byte[] senseHatInverseGammaTable = GammaCalc.Get5To8BitInvertedGamma(senseHatGamma).ToArray();

			int bufferIndex = 0;
			for (int y = 0; y < 8; y++)
			{
				for (int x = 0; x < 8; x++)
				{
					var r = senseHatInverseGammaTable[buffer[bufferIndex]];
					var g = senseHatInverseGammaTable[buffer[bufferIndex + 8]];
					var b = senseHatInverseGammaTable[buffer[bufferIndex + 16]];
					bufferIndex++;

					pixels[x, y] = Color.FromArgb(255, r, g, b);
				}

				bufferIndex += 16;
			}

			return pixels;
		}

		public static byte[] PixelsToBuffer(Color[,] pixels, double senseHatGamma)
		{
			byte[] buffer = new byte[8 * 8 * 3]; // (3 for R,G,B)

			byte[] senseHatGammaTable = GammaCalc.Get5BitGamma(senseHatGamma).ToArray();
	
			int index = 0;
			for (int y = 0; y < 8; y++)
			{
				for (int x = 0; x < 8; x++)
				{
					Color color = pixels[x, y];

					buffer[index] = senseHatGammaTable[color.R >> 3];
					buffer[index + 8] = senseHatGammaTable[color.G >> 3];
					buffer[index + 16] = senseHatGammaTable[color.B >> 3];

					index++;
				}

				index += 16; // Step to the next row.
			}

			return buffer;
		}

		public static byte[] GetInitialLedBuffer()
		{
			return new byte[]
			{
				0x1f, 0x1f, 0x1f, 0x1f, 0x14, 0x03, 0x00, 0x00,
				0x00, 0x00, 0x03, 0x12, 0x1f, 0x1f, 0x1f, 0x1f,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,

				0x1f, 0x1f, 0x1f, 0x12, 0x03, 0x00, 0x00, 0x00,
				0x00, 0x04, 0x14, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1d,

				0x1f, 0x1f, 0x11, 0x02, 0x00, 0x00, 0x00, 0x00,
				0x05, 0x15, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0b,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1f, 0x1f,

				0x1f, 0x0f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x17, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0a, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x0a, 0x1f, 0x1f, 0x1f,

				0x0e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
				0x1f, 0x1f, 0x1f, 0x1f, 0x1d, 0x08, 0x00, 0x00,
				0x00, 0x00, 0x01, 0x0b, 0x1f, 0x1f, 0x1f, 0x1f,

				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14,
				0x1f, 0x1f, 0x1f, 0x1b, 0x07, 0x00, 0x00, 0x00,
				0x00, 0x01, 0x0c, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f,

				0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x15, 0x1f,
				0x1f, 0x1f, 0x19, 0x06, 0x00, 0x00, 0x00, 0x00,
				0x02, 0x0e, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x12,

				0x00, 0x00, 0x00, 0x00, 0x05, 0x17, 0x1f, 0x1f,
				0x1f, 0x17, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x02
			};

			//return new byte[]
			//{
			//	0x1F, 0x1F, 0x1F, 0x1F, 0x14, 0x03, 0x00, 0x00,
			//	0x00, 0x00, 0x03, 0x12, 0x1F, 0x1F, 0x1F, 0x1F,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,

			//	0x1F, 0x1F, 0x1F, 0x12, 0x03, 0x00, 0x00, 0x00,
			//	0x00, 0x04, 0x14, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x1D,

			//	0x1F, 0x1F, 0x11, 0x02, 0x00, 0x00, 0x00, 0x00,
			//	0x05, 0x15, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0B,
			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x1F, 0x1F,

			//	0x1F, 0x0F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x17, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0A, 0x00,
			//	0x00, 0x00, 0x00, 0x00, 0x0A, 0x1F, 0x1F, 0x1F,

			//	0x0E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			//	0x1F, 0x1F, 0x1F, 0x1F, 0x1D, 0x08, 0x00, 0x00,
			//	0x00, 0x00, 0x01, 0x0B, 0x1F, 0x1F, 0x1F, 0x1F,

			//	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14,
			//	0x1F, 0x1F, 0x1F, 0x1B, 0x07, 0x00, 0x00, 0x00,
			//	0x00, 0x01, 0x0C, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F,

			//	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x15, 0x1F,
			//	0x1F, 0x1F, 0x19, 0x06, 0x00, 0x00, 0x00, 0x00,
			//	0x02, 0x0E, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x12,

			//	0x00, 0x00, 0x00, 0x00, 0x05, 0x17, 0x1F, 0x1F,
			//	0x1F, 0x17, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
			//	0x0F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x0F, 0x02,
			//};
		}
	}
}